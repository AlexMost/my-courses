// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;
    static int heapBase;

    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let ram = 0;
        let heap = heapBase; // heapBase
        let freeList = heapBase;
        let heap[0] = 0; // next
        let heap[1] = 14335; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int freeSegmentAddr, block;
        let block = Memory.searchBlock(size, heapBase);
        return block;
    }

    function int searchBlock(int size, int freeSegment) {
        var int segmentSize, next, blockAddr;

        let next = ram[freeSegment];
        let segmentSize = ram[freeSegment + 1];

        if ((segmentSize > (size + 2))| (segmentSize = (size + 2))) {
            let ram[freeSegment + 1] = segmentSize - (size + 2); // decrease current segment size
            let blockAddr = (freeSegment + 1) + segmentSize - size - 2; // calc block address
            let ram[blockAddr] = 0;
            let ram[blockAddr + 1] = size;
            return blockAddr + 2;
        } else {
            if (next = 0) { // overflow case
              return heapBase;
            }
            return Memory.searchBlock(size, next);
        }
    }

    function int getLastSegment() {
      var int segment;
      let segment = heapBase;
      while(~(ram[segment] = 0)) {
        let segment = ram[segment];
      }
      return segment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int lastBlock;
      let lastBlock = Memory.getLastSegment();
      let ram[lastBlock] = o - 2;
      return;
    }
}
