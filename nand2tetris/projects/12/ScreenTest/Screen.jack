// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while(i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, real, bit, mask;
        let real = x/16;
        let address = 16384 + (32 * y) + real;
        let value = Memory.peek(address);
        let bit = x - (real * 16);
        let mask = twoToThe[bit];
        if (bit = 15) {
            let mask = mask + 1;
        }
        if (color) {
            let value = value | mask;
        } else {
            let value = value & (~mask);
        }
        do Memory.poke(address, value);
        return;
    }

    function void drawStraightLine(int x1, int y1, int x2, int y2) {
        var int tmp, i;
        if (x1 = x2) { // vertical
            if (~(y1 < y2)) {
                let tmp = y1;
                let y1 = y2;
                let y2 = tmp;
            }
            let i = y1;
            while(i < (y2 +1)) {
                do Screen.drawPixel(x1, i);
                let i = i + 1;
            }
            return;
        }
        if (y1 = y2) { // horizontal
            // assume only south direction
            if (~(x1 < x2)) {
                let tmp = x1;
                let x1 = x2;
                let x2 = tmp;
            }
            let i = x1;
            while(i < (x2 +1)) {
                do Screen.drawPixel(i, y1);
                let i = i + 1;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, tmp;
        if ((x1 = x2) | (y1 = y2)) {
            do Screen.drawStraightLine(x1, y1, x2, y2);
            return;
        }
        if (x1 > x2) {
            // switch, assume that x1 is always less than x2
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;

            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        // ascending rule (y1 > y2)
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y1 - y2;
        let diff = 0;
        if (y1 > y2) {
            let dy = y1 - y2;
            while((a < (dx + 1)) | (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        } else {
            let dy = y2 - y1;
            while((a < (dx + 1)) | (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while(i < (y2 + 1)) {
            do Screen.drawLine(x1, i, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int x1, x2, y12, dy, rSq, dx;
        let dy = r;
        let rSq = r * r;
        while (dy > (-1)) {
            let dx = Math.sqrt(rSq - (dy * dy));
            let x1 = x - dx;
            let x2 = x + dx;
            let y12 = y + dy;
            do Screen.drawLine(x1, y12, x2, y12);
            let dy = dy - 1;
        }
        let dy = r;
        while (dy > (-1)) {
            let dx = Math.sqrt(rSq - (dy * dy));
            let x1 = x - dx;
            let x2 = x + dx;
            let y12 = y - dy;
            do Screen.drawLine(x1, y12, x2, y12);
            let dy = dy - 1;
        }
        return;
    }
}
