// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int startAdressY, sum, bitNum, i, bit, shiftedX;
        var boolean neg;
        if (x = 0 | y = 0) {
            return 0;
        }

        let neg = ~(((x > 0) & (y > 0)) | ((x < 0) & (y < 0)));
        if (x < 0) {
            let x = -x;
        }
        if (y < 0) {
            let y = -y;
        }
        let sum = 0;
        let shiftedX = x;

        let startAdressY = Memory.alloc(16);
        let bitNum = Math.convert(y, startAdressY);

        let i = 0;
        while (i < bitNum) {
            let i = i + 1;
            let bit = Memory.peek(startAdressY + i);
            if (bit = 1) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
        }
        if (neg) {
            return -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    }

    /** Converts the given decimal value to binary, and puts 
     *  the resulting bits in RAM[8001]..RAM[8016]. */
    function int convert(int value, int startAdress) {
    	var int mask, position, bitNums;
    	var boolean loop;
    	
        let bitNums = 0;
        let loop = true;
    	while (loop) {
    	    let position = position + 1;
    	    let mask = Math.nextMask(mask);
    	
    	    if (~(position > 16)) {
    	
    	        if (~((value & mask) = 0)) {
    	            do Memory.poke(startAdress + position, 1);
                    let bitNums = position;
       	        }
    	        else {
    	            do Memory.poke(startAdress + position, 0);
      	        }    
    	    }
    	    else {
    	        let loop = false;
    	    }
    	}
    	return bitNums;
    }
 
    /** Returns the next mask (the mask that should follow the given mask). */
    function int nextMask(int mask) {
    	if (mask = 0) {
    	    return 1;
    	}
    	else {
	    return mask * 2;
    	}
    }
}
