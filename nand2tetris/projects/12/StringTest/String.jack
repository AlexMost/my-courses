// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
            let length = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, k, result, bottom;
        let i = length - 1;
        let k = 1;
        let result = 0;
        let bottom = -1;
        if (charAt(0) = 45) {
            let k = -1;
            let bottom = 0;
        }
        while(i > bottom) {
            let result = result + ((charAt(i) - 48) * k);
            let k = k * 10;
            let i = i - 1;
        }
        return result;
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int rem, real, tmp, i;
        var boolean neg;
        let neg = false;
        let length = 0;
        if (val < 0) {
            let neg = true;
            let val = -val;
        }
        while(val > 10) {
            let real = val / 10;
            let rem = val - (real * 10);
            do appendChar(rem + 48);
            let val = real;
        }
        do appendChar(val + 48);
        if (neg) {
            do appendChar(45);
        }
        let i = 0;
        while(i < (length/2)) {
            let tmp = str[i];
            let str[i] = str[length - 1 - i];
            let str[length - 1 - i] = tmp;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
