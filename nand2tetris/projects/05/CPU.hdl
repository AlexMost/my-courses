// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=InstrOrAddr);
    Not(in=instruction[15], out=isAInstr);
    Not(in=isAInstr, out=isCInstr);
    Or(a=isAInstr, b=instruction[5], out=ASel);

    ARegister(in=InstrOrAddr, load=ASel, out=AOut, out[0..14]=addressM);

    And(a=isCInstr, b=instruction[4], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=DOut);

    Mux16(a=AOut, b=inM, sel=instruction[12], out=AddrOrMem);
    ALU(x=DOut, y=AddrOrMem, zx=instruction[11],
                             nx=instruction[10],
                             zy=instruction[9],
                             ny=instruction[8],
                             f=instruction[7],
                             no=instruction[6],

                             out=ALUOut,
                             out=outM,
                             zr=zeroRes,
                             ng=negRes);

    And(a=instruction[3], b=isCInstr, out=writeM);

    Not(in=zeroRes, out=notZero);
    Not(in=negRes, out=posRes);

    PC(in=AOut, reset=reset, inc=true, load=needToLoadPC, out[0..14]=pc);

    DMux8Way(
        in=true,
            sel[0]=instruction[0],
            sel[1]=instruction[1],
            sel[2]=instruction[2],
        a=noJumpOut,
        b=JGTOut,
        c=JEQOut,
        d=JGEOut,
        e=JLTOut,
        f=JNEOut,
        g=JLEOut,
        h=JMPOut);

    And(a=noJumpOut, b=false, out=noJMP); // no jump

    And(a=notZero, b=posRes, out=GT);
    And(a=JGTOut, b=GT, out=JGT);         // JGT
    
    And(a=JEQOut, b=zeroRes, out=JEQ);    // JEQ

    Or(a=zeroRes, b=posRes, out=GE);
    And(a=JGEOut, b=GE, out=JGE);         // JGE

    And(a=JLTOut, b=negRes, out=JLT);     // JLT
    And(a=JNEOut, b=notZero, out=JNE);    // JNE

    Or(a=zeroRes, b=negRes, out=LE);
    And(a=JLEOut, b=LE, out=JLE);         // JLE

    And(a=JMPOut, b=true, out=JMP);       // JMP

    Or8Way(
        in[0]=noJMP,
        in[1]=JGT,
        in[2]=JEQ,
        in[3]=JGE,
        in[4]=JLT,
        in[5]=JNE,
        in[6]=JLE,
        in[7]=JMP,
        out=needToJump
    );

    And(a=needToJump, b=isCInstr, out=needToLoadPC);

}