class Snake {
   field int size;
   field Array buffer;

   constructor Snake new(int Ax, int Ay) {
      var Point head;
      let size = 1;
      let buffer = Array.new(100);
      let buffer[0] = Point.new(Ax, Ay);
      return this;
   }

   method void draw() {
      var int i;
      var Point p;
      let i = 0;
      while(~(i = size)) {
         let p = buffer[i];
         do p.draw();
         let i = i + 1;
      }
      return;
   }

   method void moveUp() {
      var Point head;
      let head = buffer[0];
      do move(Point.new(head.getX(), head.getY() - head.getSize()));
      return;
   }

   method void moveDown() {
      var Point head;
      let head = buffer[0];
      do move(Point.new(head.getX(), head.getY() + head.getSize()));
      return;
   }

   method void moveLeft() {
      var Point head;
      let head = buffer[0];
      do move(Point.new(head.getX() - head.getSize(), head.getY()));
      return;
   }

   method void moveRight() {
      var Point head;
      let head = buffer[0];
      do move(Point.new(head.getX() + head.getSize(), head.getY()));
      return;
   }

   method void eatApple(Point apple) {
      var Point p;
      var int i;
      let i = size - 1;
      while (~(i = -1)) {
         let p = buffer[i];
         let buffer[i + 1] = p;
         let i = i - 1;
      }
      let buffer[0] = apple;
      let size = size + 1;
      do draw();
      return;
   }

   method void move(Point newHead) {
      var Point p;
      var int i;
      let i = size - 1;
      while (~(i = -1)) {
         let p = buffer[i];
         let buffer[i + 1] = p;
         let i = i - 1;
      }
      let buffer[0] = newHead;
      let p = buffer[size]; // tail
      do p.dispose();
      do draw();
      return;
   }

   method Point getHead() {
      return buffer[0];
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }
}
